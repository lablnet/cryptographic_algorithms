"""
RSA.py RSA implementation.
The RSA algorithm is an asymmetric cryptographic algorithm.
In RSA the data is encrypted using the public key and decrypted using the private key.
It is a public/private key encryption algorithm.
:author: Muhammad Umer Farooq
"""
import sys
sys.path.append('./')
from algorithms.utils import str_to_int, int_to_str
from rsa_key import rsa_key_generator


def encrypt(plaintext: str, public_key: tuple) -> str:
    """
    Encrypt a string using the public key.
    :param plaintext: the string to encrypt
    :param public_key: the public key
    :return: the encrypted string
    :type plaintext: str
    :type public_key: tuple
    :rtype: str
    :author: Muhammad Umer Farooq
    """
    e, n = public_key
    # DEF: y = Ekpub(x) ≡ x**e mod n
    cipher = pow(str_to_int(plaintext), e, n)
    return cipher


def decrypt(ciphertext: str, private_key: tuple):
    """
    Decrypt a string using the private key.
    :param ciphertext: the string to decrypt
    :param private_key: the private key
    :return: the decrypted string
    :type ciphertext: str
    :type private_key: tuple
    :rtype: str
    :author: Muhammad Umer Farooq
    """
    e, n = private_key
    # DEF: x = Dkpriv(y) ≡ y**d mod n
    plaintext = pow(ciphertext, e, n)
    return int_to_str(plaintext)


if __name__ == "__main__":
    # The bits size can be changed to 1024, 2048, 4096, etc.
    bits = 1024

    # generate key
    print("Generating key...")
    print(rsa_key_generator(bits))
    alice_public_key = (2797029389475569152076486078592246261984116579501149732238975052652211482793195122604211883860218379491380404273675669821960347503886282198988367790746474964325171267138570142345078074530651819248427708402309829448643280251217839059385374155434718876367844614179512135411336113111775440340302952832614224003340319975161889420832394071075871457386849669679288099257409712405717742042552022429447765497249983753637691853472961707787121630367614830359482695403155724675924066122912000829841089971322300024904851573869995464262622269981478396683127217798580531962410275000979565956590205022277842065104674548559702346667,
                        21599263865851747098173356173484771109182867848236127407909808024597517422039153092114716984906764115128013826710639516264181535828618624824827832291767678416679146118831420545031022910052686217159611651384599720446261977978815623994674309060157046408795880469107100214817756933063860756488682935834408209670212429099675344272643862117966142041077412986637027553436283385074811019686377757919204822360641452994253430253150021852238817365540208744346449587956401951386730934419010022981914233259085984896257582366708432837939593436204966219697664580095287826534079467298734551245353828297106831894921894561047720346141)
    alice_private_key = (-7552947218251259355418024086915738966170452206292082741201095133527617452180626624057325548479050047352931737084138858319891019029088683339889169781792894515935858116974315707799500498581966327683295140954227057641044025432877396419440224908509136462478616695753466158509501054344969464168342254731897272238785907040869813778737375578399000349097490923881624470242925362479677498229610915244456029125538198122282173027163777898125159330953142213994953660019734729354066626066105745271685155022727794221416686485817605672402214645038709523305779846137542266985883104252518665927110986137110102359164463910895276643109,
                         21599263865851747098173356173484771109182867848236127407909808024597517422039153092114716984906764115128013826710639516264181535828618624824827832291767678416679146118831420545031022910052686217159611651384599720446261977978815623994674309060157046408795880469107100214817756933063860756488682935834408209670212429099675344272643862117966142041077412986637027553436283385074811019686377757919204822360641452994253430253150021852238817365540208744346449587956401951386730934419010022981914233259085984896257582366708432837939593436204966219697664580095287826534079467298734551245353828297106831894921894561047720346141)
    bob_public_key = (1546406819538901273886306741572295716808049314403399724755851193255543635574013932095401075222832902861062671925978217699707641064851557898702899870038565377864209404244283858511742129486615311935391292369463081941584467912663406621032050892020804711046117677713378274627292914779928431083112252903373639874084392852134579829098742428716796669702986559530785526564082563588271583066891981149629489807640686410401413396284979199121780994772548434694989484095285272552041027653334473586148264435222950848745025006334364784557422033337217619716570839656152241779223690899362425018788997495558779291470621302603800644617,
                      16390879083614773015718409484109716188136899908710059771918460912935792513805490235331167453614897097903150699550758111506269008906960688705275908672098632328753952796168604739690077292658588758371899772133516065018136216935089789648229198435577694357333796612349345318331808068873430774029697853331964198757556690563220752008168956256731419028600636434906211623236785798942401833916763733809047349972135175473207863502444178825028149073418220749852325750702072496152865733709837671387127877318484919582029518074259558417800347250614081660991163744604909729601665992187059452459726437361176975404083617479480445032971)
    bob_private_key = (4603091471576891388051958873881205156807687326336383714184449573364521630216946208750057689582034507820970212111460176966638102038904569518275924632093065444385376818572111936485703069527201120938139432103399432610139798090458099045130951708520249592417869396328807040138142768198669361934900828284913163472820698973272139562256513446117450995634601997377199172488619426169657659104941537094222959186630084623052141961239148164243117252981588993118658384950201596003134004664003856267782880763795357048568174158584975163730532116383939877749775387390639100595874988082317407706887004492466050216703917940876324935849,
                       16390879083614773015718409484109716188136899908710059771918460912935792513805490235331167453614897097903150699550758111506269008906960688705275908672098632328753952796168604739690077292658588758371899772133516065018136216935089789648229198435577694357333796612349345318331808068873430774029697853331964198757556690563220752008168956256731419028600636434906211623236785798942401833916763733809047349972135175473207863502444178825028149073418220749852325750702072496152865733709837671387127877318484919582029518074259558417800347250614081660991163744604909729601665992187059452459726437361176975404083617479480445032971)

    text = "Hello World"
    print("Alice wants to send a message to Bob")
    print("Alice encrypts the message with Bob's public key")
    alice_msg = encrypt(text, bob_public_key)
    print("Alice sends the message to Bob")
    print("Bob decrypts the message with his private key")
    plaintext = decrypt(alice_msg, bob_private_key)
    print("text", text)
    print("cipher", alice_msg)
    print("plaintext", plaintext)
